import redis
import json
import time
import os
from sqlalchemy.orm import Session
from models.database import SessionLocal, ContainerHistory, create_tables
import datetime

def process_containers_data():
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    redis_password = os.getenv('REDIS_PASSWORD', 'your_secure_redis_password_123')
    r = redis.Redis(
        host='redis',
        port=6379,
        password=redis_password,
        decode_responses=True
    )
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
    db = SessionLocal()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
        db.query(ContainerHistory).first()
    except:
        print(" Tables don't exist, creating...")
        create_tables()
        print(" Tables created")
    
    print("üõ†Ô∏è Worker started...")
    
    while True:
        try:
            data = r.get("containers_status")
            
            if data:
                containers_data = json.loads(data)
                containers_to_save = []
                
                # –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í
                for container in containers_data:
                    container_name = container["name"]
                    current_status = container["status"]
                    
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –≤ –ë–î
                        last_record = db.query(ContainerHistory).filter(
                            ContainerHistory.container_name == container_name
                        ).order_by(ContainerHistory.timestamp.desc()).first()
                        
                        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
                        if not last_record or last_record.status != current_status:
                            containers_to_save.append(container)
                            
                    except Exception as e:
                        # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                        print(f"‚ö†Ô∏è Table error, saving all data: {e}")
                        containers_to_save = containers_data
                        break
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                if containers_to_save:
                    for container in containers_to_save:
                        db_container = ContainerHistory(
                            container_name=container["name"],
                            status=container["status"],
                            image=container.get("image", "unknown"),
                            timestamp=datetime.datetime.utcnow()
                        )
                        db.add(db_container)
                    
                    db.commit()
                    print(f"‚úÖ Worker saved {len(containers_to_save)} containers to PostgreSQL")
                else:
                    print("‚è≥ No container status changes detected")
            
            else:
                print("‚è≥ No data in Redis yet...")
            
            time.sleep(60)
            
        except Exception as e:
            print(f"‚ùå Worker error: {e}")
            db.rollback()
            time.sleep(10)

if __name__ == "__main__":
    process_containers_data()