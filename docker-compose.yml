version: '3.8'
services:
#basement
  nginx:
    image: nginx:alpine
    container_name: nginx_container_reverse_proxy_app
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf 
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
  frontend:
    build: ./frontend
    container_name: frontend_container_app
    networks:
      - app-network
    depends_on:
      - backend

  backend:
    container_name: backend_container_app
    build: ./backend
    environment:
      - DATABASE_URL=postgresql://app_user:app_pass@postgres:5432/postgres_db
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}

    networks: 
      - app-network
    depends_on:
      - 'postgres'
      - 'redis'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  postgres:
    image: postgres:15
    networks: 
      - app-network
    container_name: postgres_db_app
    environment:
      POSTGRES_USER: app_user
      POSTGRES_PASSWORD: app_pass
      POSTGRES_DB: postgres_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U app_user -d postgres_db" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true
  redis:
    networks: 
      - app-network
    image: redis:7.2-alpine
    container_name: redis_container_app
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "6380:6379"
    volumes:
      - ./redisdata:/data
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

#monitoring
  worker:
    build: ./backend
    command: python worker.py
    container_name: worker_app
    environment:
      - REDIS_URL=redis://redis:6379
    networks: 
      - app-network
    depends_on:
      - 'redis'

  monitoring-collector: 
    container_name: collector_container_app
    networks: 
      - app-network
    build: ./monitoring-collector
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://app_user:app_pass@postgres:5432/postgres_db
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  scheduler:
    container_name: scheduler_container_app
    networks: 
      - app-network
    build: ./backend
    environment:
    - DATABASE_URL=postgresql://app_user:app_pass@postgres:5432/postgres_db
    - REDIS_URL=redis://redis:6379  
    command: python scheduler.py

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redisdata:
